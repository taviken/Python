 <specification> ::= <definition>+
 <definition> ::= <module_dcl> ";"
		| <const_dcl> ";"
		| <type_dcl> ";"
 <module_dcl> ::= "module" <identifier> "{" <definition>+ "}"
 <scoped_name> ::= <identifier>
		| "::" <identifier>
		| <scoped_name> "::" <identifier>
 <const_dcl> ::= "const" <const_type> <identifier> "=" <const_expr>
 <const_type> ::= <integer_type>
		| <floating_pt_type>
        | <fixed_pt_const_type>
        | <char_type>
        | <wide_char_type>
        | <boolean_type>
        | <octet_type>
        | <string_type>
        | <wide_string_type>
        | <scoped_name>
 <const_expr> ::= <or_expr>
 <or_expr> ::= <xor_expr>
        | <or_expr> "|" <xor_expr>
 <xor_expr> ::= <and_expr>
        | <xor_expr> "^" <and_expr>
 <and_expr> ::= <shift_expr>
        | <and_expr> "&" <shift_expr>
 <shift_expr> ::= <add_expr>
        | <shift_expr> ">>" <add_expr>
        | <shift_expr> "<<" <add_expr>
 <add_expr> ::= <mult_expr>
        | <add_expr> "+" <mult_expr>
        | <add_expr> "-" <mult_expr>
 <mult_expr> ::= <unary_expr>
        | <mult_expr> "*" <unary_expr>
        | <mult_expr> "/" <unary_expr>
        | <mult_expr> "%" <unary_expr>
 <unary_expr> ::= <unary_operator> <primary_expr>
        | <primary_expr>
 <unary_operator> ::= "-"
        | "+"
        | "~"
<primary_expr> ::= <scoped_name>
        | <literal>
        | "(" <const_expr> ")"
<literal> ::= <integer_literal>
        | <floating_pt_literal>
        | <fixed_pt_literal>
        | <character_literal>
        | <wide_character_literal>
        | <boolean_literal>
        | <string_literal>
        | <wide_string_literal>
<boolean_literal> ::= "TRUE"
        | "FALSE"
<positive_int_const> ::= <const_expr>
<type_dcl> ::= <constr_type_dcl>
        | <native_dcl>
        | <typedef_dcl>
<type_spec> ::= <simple_type_spec>
<simple_type_spec> ::= <base_type_spec>
        | <scoped_name>
<base_type_spec> ::= <integer_type>
        | <floating_pt_type>
        | <char_type>
        | <wide_char_type>
        | <boolean_type>
        | <octet_type>
<floating_pt_type> ::= "float"
        | "double"
        | "long" "double"
<integer_type> ::= <signed_int>
        | <unsigned_int>
<signed_int> ::= <signed_short_int>
        | <signed_long_int>
        | <signed_longlong_int>
<signed_short_int> ::= "short"
<signed_long_int> ::= "long"
<signed_longlong_int> ::= "long" "long"
<unsigned_int> ::= <unsigned_short_int>
        | <unsigned_long_int>
        | <unsigned_longlong_int>
<unsigned_short_int> ::= "unsigned" "short"
<unsigned_long_int> ::= "unsigned" "long"
<unsigned_longlong_int> ::= "unsigned" "long" "long"
<char_type> ::= "char"
<wide_char_type> ::= "wchar"
<boolean_type> ::= "boolean"
<octet_type> ::= "octet"
<template_type_spec> ::= <sequence_type>
        | <string_type>
        | <wide_string_type>
        | <fixed_pt_type>
<sequence_type> ::= "sequence" "<" <type_spec> "," <positive_int_const> ">"
        | "sequence" "<" <type_spec> ">"
<string_type> ::= "string" "<" <positive_int_const> ">"
        | "string"
<wide_string_type> ::= "wstring" "<" <positive_int_const> ">"
        | "wstring"
<fixed_pt_type> ::= "fixed" "<" <positive_int_const> "," <positive_int_const> ">"
<fixed_pt_const_type> ::= "fixed"
<constr_type_dcl> ::= <struct_dcl>
        | <union_dcl>
        | <enum_dcl>
<struct_dcl> ::= <struct_def>
        | <struct_forward_dcl>
<struct_def> ::= "struct" <identifier> "{" <member>+ "}"
<member> ::= <type_spec> <declarators> ";"
<struct_forward_dcl> ::= "struct" <identifier>
<union_dcl> ::= <union_def>
        | <union_forward_dcl>
<union_def> ::= "union" <identifier> "switch" "(" <switch_type_spec> ")" "{" <switch_body> "}"
<switch_type_spec> ::= <integer_type>
        | <char_type>
        | <boolean_type>
        | <scoped_name>
<switch_body> ::= <case>+
<case> ::= <case_label>+ <element_spec> ";"
<case_label> ::= "case" <const_expr> ":"
        | "default" ":"
<element_spec> ::= <type_spec> <declarator>
<union_forward_dcl> ::= "union" <identifier>
<enum_dcl> ::= "enum" <identifier>"{" <enumerator> { "," <enumerator> } * "}"
<enumerator> ::= <identifier>
<array_declarator> ::= <identifier> <fixed_array_size>+
<fixed_array_size> ::= "[" <positive_int_const> "]"
<native_dcl> ::= "native" <simple_declarator>
<simple_declarator> ::= <identifier>
<typedef_dcl> ::= "typedef" <type_declarator>
<type_declarator> ::= { <simple_type_spec>
                        | <template_type_spec>
                        | <constr_type_dcl>
                      } <any_declarators>
<any_declarators> ::= <any_declarator> { "," <any_declarator> }*
<any_declarator> ::= <simple_declarator>
        | <array_declarator>
<declarators> ::= <declarator> { "," <declarator> }*
<declarator> ::= <simple_declarator>